# Generated by Django 2.2.14 on 2020-12-04 23:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('plugins', '0001_initial'),
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='CarouselItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(blank=True, max_length=50, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='stores/carousel/')),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='ColorVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=20)),
                ('image', models.FileField(blank=True, upload_to='stores/product/variants/')),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('worth', models.DecimalField(decimal_places=2, max_digits=10)),
                ('validity', models.DateField(blank=True, null=True)),
                ('been_used_by', models.ManyToManyField(blank=True, related_name='users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=5)),
                ('symbol', models.CharField(max_length=1)),
            ],
            options={
                'verbose_name_plural': 'Currencies',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.MinLengthValidator(11)])),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('pending', 'Pending'), ('not_paid', 'Not Paid')], default='pending', max_length=7)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('date_paid', models.DateTimeField(blank=True, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('hidden', models.BooleanField(default=False)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Cart')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api', models.CharField(choices=[('remita', 'https://remita.net/'), ('vougepay', 'https://vougepay.com/api'), ('paypal', 'http://paypal.com/'), ('stripe', 'http://stripe.com/'), ('mastercard', 'http://developers.mastercard.com/')], max_length=30)),
                ('token', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('image', models.FileField(upload_to='stores/products')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('quantity', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category', to='store.Category')),
                ('colors', models.ManyToManyField(blank=True, to='store.ColorVariant')),
            ],
        ),
        migrations.CreateModel(
            name='SizeVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=200, unique=True)),
                ('type', models.CharField(choices=[('facebook', 'Facebook'), ('twitter', 'Twitter'), ('instagram', 'Instagram'), ('craigslist', 'Craigslist'), ('tumblr', 'Tumblr'), ('craigslist', 'Craigslist')], max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('logo', models.FileField(blank=True, upload_to='stores/logos')),
                ('date_opened', models.DateField(auto_now=True)),
                ('staff_limit', models.IntegerField(default=2)),
                ('custom_css', models.FileField(blank=True, upload_to='stores/css')),
                ('custom_js', models.FileField(blank=True, upload_to='stores/js')),
                ('template_dir', models.FilePathField(allow_files=False, allow_folders=True, blank=True, default='/home/joel/Projects/Vendora Deploy/src/templates/store/', max_length=400, path='/home/joel/Projects/Vendora Deploy/src/templates/store/')),
                ('is_open', models.BooleanField(default=True)),
                ('blocked', models.BooleanField(default=False)),
                ('is_setup', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True)),
                ('campaigns', models.ManyToManyField(blank=True, related_name='campaigns', to='store.Campaign')),
                ('carousel', models.ManyToManyField(blank=True, related_name='carousel', to='store.CarouselItem')),
                ('coupons', models.ManyToManyField(blank=True, related_name='coupon', to='store.Coupon')),
                ('currency', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='store.Currency')),
                ('customers', models.ManyToManyField(blank=True, related_name='customers', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='accounts.Merchant')),
                ('payment_methods', models.ManyToManyField(blank=True, related_name='payment_methods', to='store.PaymentMethod')),
                ('platforms', models.ManyToManyField(blank=True, related_name='platforms', to='store.Social')),
                ('plugins', models.ManyToManyField(blank=True, to='plugins.Plugin')),
                ('products', models.ManyToManyField(blank=True, related_name='products', to='store.Product')),
                ('staff_accounts', models.ManyToManyField(default=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='accounts.Merchant'), to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='WishItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Product')),
            ],
        ),
        migrations.CreateModel(
            name='WishList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items', models.ManyToManyField(blank=True, to='store.WishItem')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
        ),
        migrations.AddField(
            model_name='wishitem',
            name='list',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.WishList'),
        ),
        migrations.AddField(
            model_name='social',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store'),
        ),
        migrations.AddField(
            model_name='product',
            name='sizes',
            field=models.ManyToManyField(blank=True, to='store.SizeVariant'),
        ),
        migrations.AddField(
            model_name='product',
            name='sub_cats',
            field=models.ManyToManyField(blank=True, to='store.Category'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, to='store.Tag'),
        ),
        migrations.AddField(
            model_name='paymentmethod',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking_id', models.IntegerField()),
                ('date', models.DateTimeField(auto_now=True)),
                ('delivered', models.BooleanField(default=False)),
                ('delivery_status', models.CharField(choices=[('null', 'Not-Started'), ('moving', 'On Route')], default='null', max_length=100)),
                ('invoice', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='store.Invoice')),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='store.Store')),
            ],
        ),
        migrations.AddField(
            model_name='invoice',
            name='issuer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='payer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coupon',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store'),
        ),
        migrations.AddField(
            model_name='colorvariant',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Product'),
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('size', models.CharField(blank=True, max_length=3, null=True)),
                ('color', models.CharField(blank=True, max_length=3, null=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Cart')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Product')),
            ],
        ),
        migrations.AddField(
            model_name='cart',
            name='items',
            field=models.ManyToManyField(blank=True, related_name='items', to='store.CartItem'),
        ),
        migrations.AddField(
            model_name='cart',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cart',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Store'),
        ),
        migrations.AddField(
            model_name='carouselitem',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store', to='store.Store'),
        ),
        migrations.CreateModel(
            name='CampaignItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign', to='store.Campaign')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Product')),
            ],
        ),
        migrations.AddField(
            model_name='campaign',
            name='items',
            field=models.ManyToManyField(blank=True, related_name='items', to='store.CampaignItem'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='platforms',
            field=models.ManyToManyField(blank=True, to='store.Social'),
        ),
    ]
